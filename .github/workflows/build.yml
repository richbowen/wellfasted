name: 🛠 WellFasted CI/CD - Android Build & Release

on:
  push:
    branches: [master, main]
    tags: ["v*.*.*"]
  pull_request:
    branches: [master, main]

permissions:
  contents: write # allow creating/updating Releases & uploading assets
  actions: read # allow pulling marketplace actions

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ═══════════════════════════════════════════════════════════════════
  # CODE QUALITY & TESTING
  # ═══════════════════════════════════════════════════════════════════
  analyze_and_test:
    runs-on: ubuntu-latest
    name: 🔍 Code Quality & Tests

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Cache pub deps
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: ${{ runner.os }}-pub-

      - name: 🦋 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: 📥 Get dependencies
        run: flutter pub get

      - name: 🔍 Analyze code
        run: flutter analyze --fatal-infos

      - name: 🧪 Run tests
        run: flutter test --coverage || echo "Tests failed but continuing build"

      - name: 📊 Upload coverage reports
        if: github.event_name == 'push' && success()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # ═══════════════════════════════════════════════════════════════════
  # ANDROID BUILD
  # ═══════════════════════════════════════════════════════════════════
  build_android:
    needs: analyze_and_test
    runs-on: ubuntu-latest
    name: 🤖 Build Android

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Cache pub deps
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: ${{ runner.os }}-pub-

      - name: 🚀 Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: ☕️ Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: 🦋 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: 📥 Get dependencies
        run: flutter pub get

      - name: 🔧 Generate build files
        run: flutter packages pub run build_runner build --delete-conflicting-outputs || echo "No build runner needed"

      - name: 🏗️ Build APK (Debug)
        if: github.event_name == 'pull_request'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: flutter build apk --debug --dart-define=GEMINI_API_KEY=$GEMINI_API_KEY --dart-define=ENV=development

      - name: 🏗️ Build APKs (Release - Split per ABI)
        if: github.event_name == 'push'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: flutter build apk --release --split-per-abi --dart-define=GEMINI_API_KEY=$GEMINI_API_KEY --dart-define=ENV=production

      - name: 🏗️ Build Universal APK (Release)
        if: github.event_name == 'push'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: flutter build apk --release --dart-define=GEMINI_API_KEY=$GEMINI_API_KEY --dart-define=ENV=production

      - name: 📝 List build outputs
        run: |
          echo "🔍 APK outputs:"
          find build/app/outputs -name "*.apk" -type f || echo "No APKs found"

      - name: 📦 Upload Android APK artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: wellfasted-android-apks
          path: build/app/outputs/flutter-apk/*.apk
          retention-days: 30

      - name: 📦 Upload Debug APK (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: wellfasted-android-debug-apk
          path: build/app/outputs/flutter-apk/*.apk
          retention-days: 7

  # ═══════════════════════════════════════════════════════════════════
  # RELEASE (only on tags)
  # ═══════════════════════════════════════════════════════════════════
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build_android]
    runs-on: ubuntu-latest
    name: 🏷️ Create Release

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          name: wellfasted-android-apks
          path: release-artifacts/apks

      - name: 📦 Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy APKs with descriptive names
          for apk in release-artifacts/apks/*.apk; do
            if [[ -f "$apk" ]]; then
              filename=$(basename "$apk")
              # Add version tag to filename
              new_name="WellFasted-${{ github.ref_name }}-${filename}"
              cp "$apk" "release-assets/${new_name}"
            fi
          done

          # List all files for verification
          echo "📋 Release assets prepared:"
          ls -la release-assets/

      - name: 🏷️ Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: WellFasted ${{ github.ref_name }}
          body: |
            ## 🍽️ WellFasted Release ${{ github.ref_name }}

            **Intermittent Fasting Tracker with AI-powered meal recommendations**

            ### 📱 Downloads
            - **APK Files**: For direct installation on Android devices
            - **App Bundle (AAB)**: For Google Play Store deployment

            ### ✨ Features
            - ⏱️ Customizable fasting timers
            - 🤖 AI-powered meal recommendations via Gemini
            - 📊 Fasting history tracking
            - 🔔 Smart notifications
            - 🎨 Beautiful, modern UI

            ### 📋 Installation
            1. Download the appropriate APK for your device architecture
            2. Enable "Install from unknown sources" in Android settings
            3. Install the APK file

            ---

            **Built with Flutter** 🦋 | **Powered by Gemini AI** 🤖
          artifacts: release-assets/*
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          makeLatest: true

  # ═══════════════════════════════════════════════════════════════════
  # BUILD SUMMARY
  # ═══════════════════════════════════════════════════════════════════
  build_summary:
    if: always()
    needs: [analyze_and_test, build_android]
    runs-on: ubuntu-latest
    name: 📋 Build Summary

    steps:
      - name: 📊 Print build summary
        run: |
          echo "## 🏗️ WellFasted Build Summary"
          echo "- **Code Quality**: ${{ needs.analyze_and_test.result }}"
          echo "- **Android Build**: ${{ needs.build_android.result }}"
          echo "- **Trigger**: ${{ github.event_name }}"
          echo "- **Branch/Tag**: ${{ github.ref }}"
          echo "- **Commit**: ${{ github.sha }}"
